% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tokenize_text.R
\name{tokenize_text}
\alias{tokenize_text}
\title{Function is a wrapper around various text tokenizations offered by the \code{tokenizers}
package with some added functionality.}
\usage{
tokenize_text(
  x,
  type = "word",
  chunck_size = 80,
  n_gram = 2L,
  ngram_delimiter = " ",
  input_col = "text",
  output_col = NULL,
  stopwords = NULL,
  lowercase = TRUE,
  strip_numeric = FALSE,
  strip_punct = FALSE,
  strip_non_alphanum = FALSE,
  paragraph_break = "\\n\\n",
  regex_pattern = "\\\\s+",
  regex_return = "logical",
  na.rm = TRUE
)
}
\arguments{
\item{x}{A character vector of any length or data frame with a column of character vectors
where each vector has a length of 1.}

\item{type}{A string that sets the type of tokenization.  Acceptable values are \dQuote{character},
\dQuote{word}, \dQuote{sentence}, \dQuote{paragraph}, \dQuote{line}, \dQuote{chunck}, \dQuote{ngram},
\dQuote{ngram}, \dQuote{regex}.}

\item{chunck_size}{An integer that defines the number of words in a "chunck" when
\code{type} is \dQuote{chunck}}

\item{n_gram}{The number of words in the n-gram if \code{type} is \dQuote{ngram}.
Must be an integer greater than or equal to 1L.}

\item{ngram_delimiter}{The separator between words in a n-gram if \code{type} is \dQuote{ngram}.}

\item{input_col}{If \code{x} is a data frame then this is name of the column
with the list of character vectors of length 1.}

\item{output_col}{The name of the column in the returned data.table containing the tokens.}

\item{stopwords}{A character vector of stop words to be excluded from the input text. Stopwords
work for tokenize \code{type}'s \dQuote{words}, \dQuote{chuncks}, and \dQuote{ngram}.}

\item{lowercase}{A logical which if TRUE then input text will converted to lower case
with the exception of \dQuote{lines} and \dQuote{paragraphs}.}

\item{strip_numeric}{A logical which if TRUE input text will be stripped of numbers
if \code{type} is \dQuote{words}.}

\item{strip_punct}{A logical which if TRUE input text will be stripped of punctuation
if \code{type} is \dQuote{words} or \dQuote{sentences}}

\item{strip_non_alphanum}{A logical which if TRUE then input text will be stripped of
non-alphanumerics if \code{type} is \dQuote{characters}}

\item{paragraph_break}{A string that defines the delimiter of paragraphs within the input text.}

\item{regex_pattern}{A string that defines the pattern for tokenization with regex.}

\item{regex_return}{A string that defines the return value for a regex. A value of
\dQuote{logical} returns TRUE or FALSE if the pattern is found. A value of \dQuote{string}
returns the actual string detected.}

\item{na.rm}{A logical which if TRUE removes NA values from among the resulting words.}
}
\value{
A named list containing:
\enumerate{
\item \dQuote{tokens_dt}:  A data.table with a column of tokens defined by \code{type}.
The column name is defined by \code{output_col} argument.
\item \dQuote{tokens_count} A data.table of token counts. If \code{type} is
\dQuote{ngram} it is showing paired n-gram counts. For \code{type} \dQuote{word}
it is showing total word counts. Otherwise the value is NULL.
}
}
\description{
Function is a wrapper around various text tokenizations offered by the \code{tokenizers}
package with some added functionality.
}
\author{
Rick Dean
}
